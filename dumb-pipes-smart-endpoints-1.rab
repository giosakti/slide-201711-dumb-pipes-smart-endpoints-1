= Dumb Pipes and Smart-Endpoints

: subtitle
   Part 1
: author
   Giovanni Sakti
: institution
   Starqle
% : content-source
%    id_ruby
% : date
%    2017-11-01
: theme
   starqle

= Inter-Services Communication

(('tag:center'))Inter-Services Communication

== properties
  : hide-title
    true

= Inter-Services Communication

(('tag:center'))Communication between services is a very important theme on microservices architecture.

== properties
  : hide-title
    true

= Inter-Services Communication

(('tag:center'))In monolithic application, communication is less important because everything is just one query away or one method call away.

= Inter-Services Communication

(('tag:center'))In microservices, however, many thing is different.

= Inter-Services Communication

(('tag:center'))If direct conversion is used from monolithic to microservices architecture, it will cause a chatty and not efficient communication.
# It will not perform well in distributed environments

= Inter-Services Communication

(('tag:center'))Challenges of designing distributed system properly is well known.

= Inter-Services Communication

(('tag:center'))Exist important concept that is known as "The Fallacies of Distributed Computing"

= The Fallacies of Distributed Computing

* The network is reliable.
* Latency is zero.
* Bandwidth is infinite.
* The network is secure.

= The Fallacies of Distributed Computing (cont'd)

* Topology doesn't change.
* There is one administrator.
* Transport cost is zero.
* The network is homogeneous.

= Dumb Pipes, Smart Endpoints

(('tag:center'))To avoid those fallacies, microservices facilitates something called "Dumb Pipes and Smart Endpoints"

= Dumb Pipes, Smart Endpoints

(('tag:center'))It encourages a design that ((*as decoupled as possible*)) between services and ((*as cohesive as possible*)) within a single service

= Dumb Pipes, Smart Endpoints

(('tag:center'))The pipes (communication) should be lean and does not contain any logic to avoid problem with CI/CD and to avoid coupling.
# Because it is hard to version smart network infrastructure like ESB

= Dumb Pipes, Smart Endpoints

(('tag:center'))While the endpoints (services) should be as smart and adaptive as possible when communicating.

= Tolerant Reader

(('tag:center'))Endpoints must become a ((*Tolerant Reader*))

== properties
  : hide-title
    true

= Tolerant Reader

(('tag:center'))Endpoints should be as tolerant as possible when reading data from a service.

= Tolerant Reader

(('tag:center'))Endpoints should also make minimum assumptions about the structure of the service response.

= Tolerant Reader

(('tag:center'))It is also recommended to design endpoints that take only the elements or data they need, and ignore everything else when consuming service.

= Coarser-grained Communication

(('tag:center'))Towards Coarser-grained Communication

== properties
  : hide-title
    true

= Coarser-grained Communication

(('tag:center'))Because network calls are costly and unreliable, we should also use coarser-grained communications.

= Coarser-grained Communication

(('tag:center'))It means: to reduce opening many connections, calls should be grouped instead.

= Coarser-grained Communication

(('tag:center'))Request and response data should be aggregated so that it can be returned in fewer connections.

= Types of Communication

(('tag:center'))Types of Communication

== properties
  : hide-title
    true

= Types of Communication

(('tag:center'))There are two types of communication that we can pick

= Types of Communication

* Remote Procedure Invocation (Synchronous)
* Messaging (Asynchronous)

= Remote Procedure Invocation

(('tag:center'))We will focus on synchronous communication first using RPI.

= Remote Procedure Invocation

(('tag:center'))If a service needs information from another service, it will asks that service directly by making a call.

= Remote Procedure Invocation

(('tag:center'))The call will be a synchronous one, it means the process will block other processes until the remote service gives a response.

= Remote Procedure Invocation

There are several RPI protocols available:
* REST API
* SOAP
* gRPC
* Apache Thrift

= REST API

(('tag:center'))REST API is one of the most popular way for communicating between services with synchronous approach.

= REST API

(('tag:center'))Each REST API call is stateless and almost exclusively use HTTP protocol.

= REST API

(('tag:center'))The request parameters can be put in the URL or embedded in its payload.

= REST API

(('tag:center'))While the reponse usually use JSON format.

= REST API

(('tag:center'))Standard on designing the response is usually exist in companies implementing REST API.

= Thanks

(('tag:center'))Thanks!

== properties
  : hide-title
    true
